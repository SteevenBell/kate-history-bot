package com.katehistory.telegram.keyboard;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.katehistory.telegram.keyboard.enums.BotButtonEnum;
import com.katehistory.telegram.keyboard.enums.MainMenuButtonEnum;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JSON –¥–ª—è reply_markup
 */

@Slf4j
@Component
public class KeyboardFactory {
    private final ObjectMapper objectMapper = new ObjectMapper();

    public String getCompactMainMenu() throws JsonProcessingException {
        List<List<String>> keyboard = List.of(
                List.of(
                        MainMenuButtonEnum.STUDY.getText(),
                        MainMenuButtonEnum.CHAT.getText(),
                        MainMenuButtonEnum.PROFILE.getText()
                )
        );

        Map<String, Object> replyMarkup = new HashMap<>();
        replyMarkup.put("keyboard", keyboard);
        replyMarkup.put("resize_keyboard", true);
        replyMarkup.put("one_time_keyboard", false);
        return objectMapper.writeValueAsString(replyMarkup);
    }

    // –ü–æ–¥–º–µ–Ω—é: –£—á–∏—Ç—å—Å—è üìö
    public String getStudyMenu() {
        try {
            return InlineKeyboardBuilder.create()
                    .button(BotButtonEnum.FREE_MATERIALS).newRow()
                    .button(BotButtonEnum.TEST_MENU).newRow()
                    .button(BotButtonEnum.COURSES_MENU).newRow()
                    .build(objectMapper);
        } catch (JsonProcessingException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –£—á–∏—Ç—å—Å—è: ", e);
            return null;
        }
    }

    // –ü–æ–¥–º–µ–Ω—é: –û–±—â–µ–Ω–∏–µ üí¨
    public String getCommunicationMenu() throws JsonProcessingException {
        return InlineKeyboardBuilder.create()
                .button(BotButtonEnum.BOOK_LESSON).newRow()
                .button(BotButtonEnum.SUPPORT).newRow()
                .build(objectMapper);
    }

    // –ü–æ–¥–º–µ–Ω—é: –ü—Ä–æ—Ñ–∏–ª—å üë§
    public String getProfileMenu() throws JsonProcessingException {
        return InlineKeyboardBuilder.create()
                .button(BotButtonEnum.ACHIEVEMENTS).newRow()
                .button(BotButtonEnum.DAILY_TASKS).newRow()
                .build(objectMapper);
    }

    public String getFreeMaterialsMenu() {
        List<List<Map<String, Object>>> inlineKeyboard = List.of(
                List.of(button("–ö–æ–Ω—Å–ø–µ–∫—Ç—ã (PDF)", "free_materials_pdf")),
                List.of(button("–ö–∞—Ä—Ç–æ—á–∫–∏ (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ)", "free_materials_cards")),
                List.of(button("–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—å–∏", "free_materials_articles")),
                List.of(button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_study_menu"))
        );
        try {
            return serializeInlineKeyboard(inlineKeyboard);
        } catch (JsonProcessingException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã getFreeMaterialsMenu: ", e);
            return null;
        }
    }

    public String getTestMenu() throws JsonProcessingException {
        List<List<Map<String, Object>>> keyboard = List.of(
                List.of(button("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ 1", "test_topic1")),
                List.of(button("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ 2", "test_topic2")),
                List.of(button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_menu"))
        );
        return serializeInlineKeyboard(keyboard);
    }

    public String getCoursesMenu() throws JsonProcessingException {
        List<List<Map<String, Object>>> keyboard = List.of(
                List.of(button("–ö—É—Ä—Å 1: –ò—Å—Ç–æ—Ä–∏—è –¥–æ XX –≤–µ–∫–∞", "course_1")),
                List.of(button("–ö—É—Ä—Å 2: –ù–æ–≤–µ–π—à–µ–µ –≤—Ä–µ–º—è", "course_2")),
                List.of(button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_menu"))
        );
        return serializeInlineKeyboard(keyboard);
    }

    public String getGameMenu() throws JsonProcessingException {
        List<List<Map<String, Object>>> keyboard = List.of(
                List.of(button("–í–æ–ø—Ä–æ—Å –¥–Ω—è", "daily_question")),
                List.of(button("–§–ª–µ—à–∫–∞—Ä—Ç–∞ –¥–Ω—è", "daily_card")),
                List.of(button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_menu"))
        );
        return serializeInlineKeyboard(keyboard);
    }

    private Map<String, Object> button(String text, String callbackData) {
        Map<String, Object> btn = new HashMap<>();
        btn.put("text", text);
        btn.put("callback_data", callbackData);
        return btn;
    }

    private String serializeInlineKeyboard(List<List<Map<String, Object>>> inlineKeyboard) throws JsonProcessingException {
        Map<String, Object> replyMarkup = new HashMap<>();
        replyMarkup.put("inline_keyboard", inlineKeyboard);
        return objectMapper.writeValueAsString(replyMarkup);
    }
}
